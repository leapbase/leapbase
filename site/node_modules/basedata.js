'use strict';
var debug = require('debug')('basedata');
var util = require('util');
var fs = require('fs');
var path = require('path');
var async = require('async');
var _ = require('lodash');
var tool = require('leaptool');

module.exports = function(app, module_name) {

  var block = {};

  // throw error if no user is logged in, otherwise continue next
  block.checkLogin = function(req, res, next) {
    var callback = arguments[3] || null;
    var loginUser = req.session && req.session.user;
    if (loginUser) {
      next();
    } else {
      var message = 'user is not logged in';
      app.cb(new Error(message), null, { message:message }, req, res, callback);
    }
  };

  block.get = function(req, res, condition, filter, callback) {
    app.db.find(module_name, condition, filter, function(error, docs, info){
      app.cb(error, docs, info, req, res, callback);
    });
  };

  // method for route handling, condition and filter are derived from req object
  block.getWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    var condition = tool.getQueryCondition(parameter);
    var filter = tool.getQueryFilter(parameter);
    block.get(req, res, condition, filter, callback);
  };

  block.getById = function(req, res, id, callback) {
    var condition = { _id:id };
    var filter = {};
    app.db.find(module_name, condition, filter, function(error, docs, info) {
      app.cb(error, docs, info, req, res, callback);
    });
  };

  block.getByField = function(req, res, field, value, callback) {
    var condition = {};
    condition[field] = value;
    var filter = {};
    debug('getByField:', condition);
    app.db.find(module_name, condition, filter, function(error, docs, info) {
      debug('getByField search result:', error, docs, info);
      app.cb(error, docs, info, req, res, callback);
    });
  };

  block.getByIdWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    var id = parameter.id || parameter._id;
    block.getById(req, res, id, callback);
  };

  block.addWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    block.add(req, res, parameter, callback);
  };

  block.add = function(req, res, parameter) {
    var callback = arguments[3] || null;
    var model = app.module[module_name].model;
    var sequenceModule = app.module['sequence'];
    var hasSequence = false;
    // debug('add - parameter:', parameter);
    for (var property in model) {
      // set sequence if needed
      var sequenceName = model[property]['sequence'];
      if (sequenceName && sequenceModule) {
        hasSequence = true;
        debug('add - sequenceName:', sequenceName);
        // model can only have one property with sequence at the moment
        sequenceModule.data.getNextSequence(req, res, sequenceName, function(error, value, info) {
          parameter[this.property] = value;
          block.addNext(req, res, parameter, callback);
          return;
        }.bind({ property:property }));
      }
      // set defalut value if model values has default=true
      if (!parameter.hasOwnProperty(property) && model[property].hasOwnProperty('values')) {
        var defaultValueItem = _.find(model[property]['values'], { default:true });
        if (defaultValueItem) {
          debug('add - set default value using values:', property, defaultValueItem.value);
          parameter[property] = defaultValueItem.value;
        }
      } 
      // set default value if model property has default_value
      if (!parameter.hasOwnProperty(property) && model[property].hasOwnProperty('default_value')) {
        debug('add - set default value:', property, model[property]['default_value']);
        parameter[property] = model[property]['default_value'];
      }
      // set create_date and create_by fields if empty
      if (property === 'create_date' && !parameter[property]) {
        parameter[property] = new Date();
      }
      if (property === 'create_by' && !parameter[property]) {
        parameter[property] = tool.getCurrentUsername(req);
      }
    }
    if (!hasSequence) {
      block.addNext(req, res, parameter, callback);
    }
  };

  block.addNext = function(req, res, parameter) {
    var callback = arguments[3] || null;
    var model = app.module[module_name].model;
    var doc = {};
    for (var property in model) {
      if (parameter.hasOwnProperty(property)) {
        var value = app.engine.castData(parameter[property], model[property]);
        doc[property] = value;
      }
    }
    // debug('add to database - doc:', doc);
    app.db.add(module_name, doc, function(error, docs, info) {
      docs = docs.ops || [];
      //debug('add to database return:', error, docs, info);
      if (!error) {
        info.message = `${module_name} is added`;
      } else {
        info.message = `Error in adding ${module_name}`;
      }
      app.cb(error, docs, info, req, res, callback);
    });
  };

  block.addDocs = function(req, res, docs, callback) {
    async.eachSeries(docs, function(doc, cb) {
      block.add(req, res, doc, function(error, docs, info) {
        cb(error);
      });
    }, function(error) {
      var message = 'All docs have been added in addDocs';
      if(error) {
        message = 'A doc failed to be added in addDocs';
      }
      app.cb(error, [], { message }, req, res, callback);
    });
  };

  block.editWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    block.edit(req, res, parameter, callback);
  };

  block.edit = function(req, res, parameter) {
    var callback = arguments[3] || null;
    var model = app.module[module_name].model;
    var isModuleOnAudit = app.module[module_name].audit;
    var auditRecords = [];
    debug('edit - module:', module_name, ' isModuleOnAudit:', isModuleOnAudit);
    var id = parameter._id || parameter.id;
    app.db.findById(module_name, id, function(error, doc, info) {
      if (!doc) {
        error = new Error('no doc found for id=' + id);
        app.cb(error, [], info, req, res, callback);
        return;
      }
      for (var property in model) {
        if (parameter.hasOwnProperty(property)) {
          var type = model[property].type;
          var subtype = model[property].subtype;
          subtype = subtype && subtype.type;
          var currentValue = doc[property] || '';
          if (type == 'string' && subtype == 'password') {
            var saltValue = doc.salt || '';
            doc[property] = tool.hash(parameter[property] + saltValue);
          } else {
            var value = app.engine.castData(parameter[property], model[property]);
            doc[property] = value;
          }
          // if isModuleOnAudit is true, collect properties with value change
          if (isModuleOnAudit && currentValue != doc[property]) {
            auditRecords.push({
              module_name: module_name,
              item_id: id,
              field: property,
              value_old: currentValue,
              value_new: doc[property]
            });
          }
        }
      }
      // set edit_date and eidt_by fields
      doc['edit_by'] = tool.getCurrentUsername(req);
      doc['edit_date'] = new Date();
      var auditModule = app.module['audit'];
      if (isModuleOnAudit && auditModule && auditRecords.length > 0) {
        debug('auditRecords:', auditRecords);
        for (var i = 0; i < auditRecords.length; i++) {
          auditModule.data.addItem(req, res, auditRecords[i], function(){});
        }
      }
      // update record in database
      app.db.updateById(module_name, id, doc, function(error, docs, info) {
        if (!error) {
          info.message = `${module_name} is edited`;
        } else {
          info.message = `Error in editing ${module_name}`;
        }
        app.cb(error, docs, info, req, res, callback);
      });
    });
  };

  block.editDocs = function(req, res, docs, callback) {
    debug('editDocs module_name:', module_name);
    debug('editDocs docs:', docs);
    async.eachSeries(docs, function(doc, cb) {
      debug('editDocs doc:', doc);
      block.edit(req, res, doc, function(error, docs, info) {
        cb(error);
      });
    }, function(error) {
      var message = 'All docs have been edited in editDocs';
      if(error) {
        message = 'A doc failed to edit in editDocs';
      }
      app.cb(error, [], { message }, req, res, callback);
    });
  };

  block.deleteWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    block.delete(req, res, parameter, callback);
  };

  block.delete = function(req, res, parameter) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    var id = parameter['_id'] || parameter['id'] || null;
    var ids = [];
    if (id) {
      ids.push(id);
    } else {
      ids = JSON.parse(parameter['ids']);
    }
    debug('delete ' + module_name + ' ids=', ids);
    app.db.deleteByIds(module_name, ids, function(error, docs, info){
      app.cb(error, docs, info, req, res, callback);
    });
  };

  block.deleteBy = function(req, res, condition) {
    var callback = arguments[3] || null;
    app.db.deleteBy(module_name, condition, function(error, docs, info){
      app.cb(error, docs, info, req, res, callback);
    })
  };

  return block;
};
