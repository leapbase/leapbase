'use strict';
var debug = require('debug')('basepage');
var util = require('util');
var fs = require('fs');
var path = require('path');
var async = require('async');
var _ = require('lodash');
var tool = require('leaptool');

module.exports = function(app, module_name, dataModule) {

  var data = dataModule;
  var block = { data:dataModule };
  var page = {};

  //show html page, used in web module for route /page/:page_name
  block.showPage = function(req, res) {
    var parameter = tool.getReqParameter(req);
    var page_name = parameter['page_name'] || 'index';
    var pageTitle = parameter['title'] || 'home';
    var page = app.getPage(req, {
      module_name: module_name,
      page_name: page_name,
      title: pageTitle
    });
    res.render([module_name, page_name + '.html'].join('/'), {
      app: app, req: req, page: page
    });
  };

  block.checkLogin = function(req, res, next) {
    if (req.session && req.session.user) {
      console.log('>>> checkLogin user:', req.session.user);
      next();
    } else {
      var url = '/user/login?url=' + req.url;
      res.redirect(url);
    }
  };

  block.checkAdminLogin = function(req, res, next) {
    if (req.session && req.session.user && req.session.user.roles) {
      if (req.session.user.roles.indexOf('admin') >= 0) {
        next();
      } else {
        app.renderInfoPage(null, [], { message:'Access is limited' }, req, res);
      }
    } else {
      var url = '/user/login?url=' + req.url;
      res.redirect(url);
    }
  };
  
  block.getItemListPage = function(req, res, condition, filter) {
    debug('in getItemListPage', condition, filter);
    var parameter = tool.getReqParameter(req);
    var module_name = parameter['module_name'];
    var module = app.module[module_name];
    var moduleData = app.module[module_name].data;
    var page = app.getPage(req, {});
    // if condition is passed in, don't show search field and add button
    page.hideSearchField = !!condition;
    page.hideAddButton = !!condition;
    // setup variables used in list page
    page.searchFields = page.searchFields || module.searchFields || [module.displayField];
    page.displayFields = page.displayFields || module.option.list_fields || null;
    page.displayFieldCount = page.displayFieldCount || 5;
    page.hideSearchField = !!page.hideSearchField;
    page.hideAddButton = !!page.hideAddButton;
    // get data
    condition = condition || null;
    filter = filter || tool.getQueryFilter(parameter);
    filter = _.isEmpty(filter)? { skip:0, limit:10 } : filter;
    debug('getItemListPage condition:', condition);
    debug('getItemListPage filter:', filter);
    moduleData.get(req, res, condition, filter, function(error, docs, info) {
      page.searchTerm = parameter.term || '';
      page.actionBase = '/admin/module/' + module_name + '/list';
      page.condition = condition;
      page.filter = filter;
      page.info = info;
      page.title = page.title || module_name + ' list';
      page.moduleName = module_name;
      page.docs = docs;
      page.detailTemplate = page.detailTemplate || '';
      if (typeof page.displayModuleIdLink == 'undefined') {
        page.displayModuleIdLink = true;
      }
      page.buttons = [{
       content:'<i class="far fa-edit" aria-hidden="true"></i>',
       link:`/admin/module/${module_name}/edit`,
       class:'btn-edit'
      },{
       content:'<i class="far fa-trash" aria-hidden="true"></i>',
       link:`/data/admin/module/${module_name}/delete`,
       class:'btn-delete'
      }];
      res.render(path.join('common', 'object_list.html'), {
        app: app, req: req, page: page
      });
    });
  };

  block.getItemViewPage = function(req, res) {
    debug('in getItemViewPage');
    var parameter = tool.getReqParameter(req);
    var module_name = parameter['module_name'];
    var module = app.module[module_name];
    var moduleData = app.module[module_name].data;
    // get item
    moduleData.getById(req, res, parameter.id, function(error, docs, info) {
      var doc = docs && docs[0] || null;
      var docHtml = {};
      for (var property in module.model) {
        var value = doc && doc[property] || '';
        var display = app.engine.toViewTag(property, value, module.model[property]);
        docHtml[property] = display;
      }
      var page = app.getPage(req, {});
      page.title = 'view ' + module_name;
      page.moduleName = module_name;
      page.docs = [doc];
      page.docHtml = docHtml;
      page.info = info;
      res.render(path.join('common', 'object_view.html'), {
        app: app, req: req, page: page
      });
    });
  };

  block.getItemEditPage = function(req, res) {
    debug('in getItemEditPage');
    var parameter = tool.getReqParameter(req);
    var module_name = parameter['module_name'];
    var module = app.module[module_name];
    var moduleData = app.module[module_name].data;
    // get item
    moduleData.getById(req, res, parameter.id, function(error, docs, info) {
      var doc = docs && docs[0] || null;
      var docHtml = {};
      for (var property in module.model) {
        var value = doc && doc[property];
        var display = app.engine.toInputTag(
          property, value, module.model[property],'form-control');
        docHtml[property] = display;
      }
      var page = app.getPage(req, {});
      page.title = 'edit ' + module_name;
      page.moduleName = module_name;
      page.docs = [doc];
      page.docHtml = docHtml;
      page.info = info;
      res.render(path.join('common', 'object_edit.html'), {
        app: app, req: req, page: page
      });
    });
  };

  block.getItemCreatePage = function(req, res) {
    debug('in getItemCreatePage');
    var parameter = tool.getReqParameter(req);
    var module_name = parameter['module_name'];
    var module = app.module[module_name];
    var moduleData = app.module[module_name].data;
    // show create page
    var docHtml = {};
    for (var property in module.model) {
      var value = parameter[property] || null;
      var display = app.engine.toInputTag(property, value, module.model[property], 'form-control');
      docHtml[property] = display;
    }
    var page = app.getPage(req, {});
    page.title = 'create ' + module_name;
    page.moduleName = module_name;
    page.docs = [];
    page.docHtml = docHtml;
    page.info = {};
    res.render(path.join('common', 'object_create.html'), {
      app: app, req: req, page: page
    });
  };

  return block;
};

